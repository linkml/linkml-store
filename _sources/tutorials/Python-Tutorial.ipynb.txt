{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Tutorial: Using the Python API\n",
    "\n",
    "This tutorial walks through the basics of using the LinkML-Store API.\n",
    "It uses the DuckDB adapter."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "adf3cccb31628e01"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Create a Client object\n",
    "\n",
    "A [Client](linkml_store.api.client.rst) acts as a holder for databases."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "4300d57155a11ef"
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "initial_id",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.094370Z",
     "start_time": "2024-04-27T19:14:08.117406Z"
    }
   },
   "outputs": [],
   "source": [
    "from linkml_store import Client\n",
    "client = Client()"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Attach and populate a DuckDB in-memory database\n",
    "\n",
    "Here we will create/attach a database to the client, and populate it\n",
    "with some JSON objects. Note that for this example, we don't provide a schema - this is *induced* behind the scenes\n",
    "for us.\n",
    "\n",
    "We will use the [duckdb adapter](linkml_store.api.stores.duckdb.rst), which is currently\n",
    "the only one in linkml-store. This is a very flexible adapter that can work in-memory or on-disk,\n",
    "and can be used for \"classic\" relational data as well as complex nested objects.\n",
    "\n",
    "The `attach_database` method creates a new database or attaches to an existing one. Here we will specify `duckdb` with no additional parameters (you could pass a full sqlalchemy URI like `duckdb:////tmp/test.db` to create a disk-based database). We will also give it as alias `mem` so we can refer to it later."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "182fb6ae2b6c1b15"
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9fa5723c-50f1-451f-8c7e-0e507ab735e2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.097540Z",
     "start_time": "2024-04-27T19:14:09.094555Z"
    }
   },
   "outputs": [],
   "source": [
    "db = client.attach_database(\"duckdb\", \"mem\")"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "Next we'll create a [Collection](linkml_store.api.collection.rst) and add some objects to it. For the duckdb adapter, a collection corresponds to a table, but linkml-store does not dictate any particular behavior and different adapters may implement differently. But in general a collection should be a list of entities of a similar type.\n",
    "\n",
    "When creating a collection we can also optionally pass an alias, in addition to the type of objects stored in it. Conventionally, this might be the name of the key in an overall container object."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "9e6635309ad5c90e"
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3602c288-e060-4848-8c5d-9f5a893cbecc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.100373Z",
     "start_time": "2024-04-27T19:14:09.097144Z"
    }
   },
   "outputs": [],
   "source": [
    "pc = db.create_collection(\"Person\", alias=\"persons\")"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now we can add some objects to the collection. We can add them one at a time, or in a batch."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "e283ff277f95d9ec"
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "853d83b2-c2c6-4d41-ad70-693041def8a3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.166995Z",
     "start_time": "2024-04-27T19:14:09.101236Z"
    }
   },
   "outputs": [],
   "source": [
    "pc.insert([\n",
    "    {\"id\": \"P1\", \"name\": \"Jie\", \"occupation\": \"StuntDouble\", \"moon\": \"Io\"},\n",
    "    {\"id\": \"P2\", \"name\": \"Ann\", \"occupation\": \"Welder\",  \"moon\": \"Io\"},\n",
    "    {\"id\": \"P3\", \"name\": \"Joe\", \"occupation\": \"Welder\",  \"moon\": \"Europa\"},\n",
    "    {\"id\": \"P4\", \"name\": \"Baz\", \"occupation\": \"Plumber\",  \"moon\": \"Europa\"},\n",
    "    {\"id\": \"P5\", \"name\": \"Xan\", \"occupation\": \"Plumber\",  \"moon\": \"Europa\"},\n",
    "    {\"id\": \"P6\", \"name\": \"Gav\", \"occupation\": \"Plumber\",  \"moon\": \"Io\"},\n",
    "    {\"id\": \"P7\", \"name\": \"Ann\", \"occupation\": \"Mechanic\",  \"moon\": \"Io\"},\n",
    "])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Querying\n",
    "\n",
    "We can query the collection methods such as `find`, `query`. Queries are generally mongodb-style key-value pairs. Currently only exact matches are supported. The query language is independent of the underlying database, e.g. this will work for mongodb, triplestores, etc later on."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "6ca2d135fa3526c7"
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "39d1317a-4cd9-4be4-97c1-4c82bad97da4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.175814Z",
     "start_time": "2024-04-27T19:14:09.168265Z"
    }
   },
   "outputs": [],
   "source": [
    "qr = pc.find({\"moon\": \"Europa\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "The resulting `QueryResult` object can be interrogated to get overall row count, actual rows, etc. It is designed to support windowing over larger payloads than the toy example here."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "3b8bb2cc664c0703"
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "313fe0e0-8636-48e6-b963-13d4aae5fe24",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.182943Z",
     "start_time": "2024-04-27T19:14:09.177970Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "3"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qr.num_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "746e22af-9e34-45de-98d3-c0113ca78b00",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.186015Z",
     "start_time": "2024-04-27T19:14:09.181861Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "[{'id': 'P3', 'name': 'Joe', 'occupation': 'Welder', 'moon': 'Europa'},\n {'id': 'P4', 'name': 'Baz', 'occupation': 'Plumber', 'moon': 'Europa'},\n {'id': 'P5', 'name': 'Xan', 'occupation': 'Plumber', 'moon': 'Europa'}]"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qr.rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8862a1f7-a57b-45a8-80d4-8cb296700df1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.223782Z",
     "start_time": "2024-04-27T19:14:09.185471Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "   id    moon name occupation\n0  P3  Europa  Joe     Welder\n1  P4  Europa  Baz    Plumber\n2  P5  Europa  Xan    Plumber",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>moon</th>\n      <th>name</th>\n      <th>occupation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>P3</td>\n      <td>Europa</td>\n      <td>Joe</td>\n      <td>Welder</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>P4</td>\n      <td>Europa</td>\n      <td>Baz</td>\n      <td>Plumber</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>P5</td>\n      <td>Europa</td>\n      <td>Xan</td>\n      <td>Plumber</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qr.rows_dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Faceting\n",
    "\n",
    "We can also perform faceted queries. Again, behind the scenes, the adapter figures the best way to do this. For a SQL database this may involve multiple queries and may be less performant than Solr/ES."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "3a7695db9aefb4b2"
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b492ee84-7ef3-413a-bceb-5ba3bca18028",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.224545Z",
     "start_time": "2024-04-27T19:14:09.191890Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{'occupation': [('Plumber', 3),\n  ('Welder', 2),\n  ('StuntDouble', 1),\n  ('Mechanic', 1)]}"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pc.query_facets(facet_columns=[\"occupation\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can also facet on multiple columns, or specify a combinatorial facet. Here we will get facet counts for different occupations on different moons."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "df5c772f85d9248a"
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "755905dc-ac35-4d96-9062-64d9835b5d2e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.224836Z",
     "start_time": "2024-04-27T19:14:09.196088Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{('occupation', 'moon'): [('Plumber', 'Europa', 2),\n  ('Welder', 'Io', 1),\n  ('Mechanic', 'Io', 1),\n  ('Welder', 'Europa', 1),\n  ('Plumber', 'Io', 1),\n  ('StuntDouble', 'Io', 1)]}"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pc.query_facets(facet_columns=[(\"occupation\", \"moon\")])"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Plotting\n",
    "\n",
    "Although it doesn't really make sense for such a small dataset we will plot the facet counts. First we will pivot the data."
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "578bb6702351babb"
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b81f9be7-c26b-43a4-a5bb-9c278596472a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.225117Z",
     "start_time": "2024-04-27T19:14:09.201684Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Occupation  Mechanic  Plumber  StuntDouble  Welder\nMoon                                              \nEuropa           0.0      2.0          0.0     1.0\nIo               1.0      1.0          1.0     1.0",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Occupation</th>\n      <th>Mechanic</th>\n      <th>Plumber</th>\n      <th>StuntDouble</th>\n      <th>Welder</th>\n    </tr>\n    <tr>\n      <th>Moon</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Europa</th>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>Io</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Provided dictionary\n",
    "data_dict = pc.query_facets(facet_columns=[(\"occupation\", \"moon\")])\n",
    "\n",
    "# Transforming the data into a format suitable for a DataFrame\n",
    "data_for_df = []\n",
    "for occupation_moon, values in data_dict.items():\n",
    "    for occupation, moon, count in values:\n",
    "        data_for_df.append({\n",
    "            'Occupation': occupation,\n",
    "            'Moon': moon,\n",
    "            'Count': count\n",
    "        })\n",
    "\n",
    "# Creating the DataFrame\n",
    "df = pd.DataFrame(data_for_df)\n",
    "\n",
    "# Pivoting the DataFrame to get it ready for a stacked bar chart\n",
    "df_pivoted = df.pivot_table(index='Moon', columns='Occupation', values='Count', fill_value=0)\n",
    "\n",
    "df_pivoted\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0eb956fc-94d9-4972-ac32-b9dc614ca0fa",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.473040Z",
     "start_time": "2024-04-27T19:14:09.216479Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "256aa004-57ce-4ebb-8f0e-30ce2c6a4a75",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.654882Z",
     "start_time": "2024-04-27T19:14:09.476443Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1000x600 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_stacked_counts(pc, col1, col2):\n",
    "    data_dict = pc.query_facets(facet_columns=[(col1, col2)])\n",
    "    data_for_df = []\n",
    "    for pair, values in data_dict.items():\n",
    "        for v1, v2, count in values:\n",
    "            data_for_df.append({\n",
    "                col1: v1,\n",
    "                col2: v2,\n",
    "                'Count': count\n",
    "            })\n",
    "    df = pd.DataFrame(data_for_df)\n",
    "    df_pivoted = df.pivot_table(index=col1, columns=col2, values='Count', fill_value=0)\n",
    "    df_pivoted.plot(kind='bar', stacked=True, figsize=(10, 6))\n",
    "    plt.title(f'Object count by {col1} and {col2}')\n",
    "    plt.xlabel(col1)\n",
    "    plt.ylabel('Objects')\n",
    "    plt.xticks(rotation=45)\n",
    "    plt.legend(title=col2)\n",
    "    plt.show()\n",
    "    \n",
    "plot_stacked_counts(pc, \"moon\", \"occupation\")"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Complex objects\n",
    "\n",
    "We can also store complex objects with arbitrary levels of nesting.\n",
    "\n",
    "For the duckdb adapter, we explicitly do not use the standard linkml relmodel transform; instead we put\n",
    "top level objects in individual collections, and behind the scenes duckdb will use lists and json objects for nesting, rather than rewriting these to normalized tables.\n",
    "\n",
    "Here we will create a top level json objects that lists persons and organizations. Persons can have histories that are lists of event objects:"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "b81c8224e6a52f85"
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [],
   "source": [
    "obj = {\n",
    "        \"persons\": [\n",
    "            {\"id\": 1, \"name\": \"n1\", \"history\": [\n",
    "                {\"event\": \"birth\", \"date\": \"2021-01-01\"},\n",
    "                {\"event\": \"death\", \"date\": \"2021-02-01\"},\n",
    "                {\"event\": \"hired\", \"date\": \"2021-02-01\", \"organization\": \"Org1\"},\n",
    "            ]},\n",
    "            {\"id\": 2, \"name\": \"n2\", \"age_in_years\": 30},\n",
    "        ],\n",
    "        \"organizations\": [\n",
    "            {\"id\": \"Org1\", \"name\": \"org1\"},\n",
    "            {\"id\": \"Org2\", \"name\": \"org2\", \"found_date\": \"2021-01-01\"},\n",
    "        ],\n",
    "    }\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.660971Z",
     "start_time": "2024-04-27T19:14:09.658674Z"
    }
   },
   "id": "5bed277dc3ce17e8"
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [],
   "source": [
    "db = client.attach_database(\"duckdb\", \"complex\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.664082Z",
     "start_time": "2024-04-27T19:14:09.661449Z"
    }
   },
   "id": "615928abbaa186e6"
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "outputs": [],
   "source": [
    "db.store(obj)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.750659Z",
     "start_time": "2024-04-27T19:14:09.667771Z"
    }
   },
   "id": "d215e964cff92ce"
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "outputs": [
    {
     "data": {
      "text/plain": "   age_in_years                                            history  id name\n0           NaN  [{'event': 'birth', 'date': '2021-01-01'}, {'e...   1   n1\n1          30.0                                               None   2   n2",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age_in_years</th>\n      <th>history</th>\n      <th>id</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>[{'event': 'birth', 'date': '2021-01-01'}, {'e...</td>\n      <td>1</td>\n      <td>n1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>30.0</td>\n      <td>None</td>\n      <td>2</td>\n      <td>n2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.get_collection(\"persons\").find().rows_dataframe"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.761909Z",
     "start_time": "2024-04-27T19:14:09.747308Z"
    }
   },
   "id": "756d8ef2eb3745fe"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Schemas\n",
    "\n",
    "Every Database has a **schema**. These can be provided explicitly via a LinkML specification,\n",
    "or they can be *induced* from data.\n",
    "\n",
    "In the first example, the schema is induced. We can query it:"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "ea6cfa8c-c0d3-4294-9534-32762efbfc40"
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name: Person\n",
      "from_schema: http://example.org/test-schema\n",
      "attributes:\n",
      "  id:\n",
      "    name: id\n",
      "    from_schema: http://example.org/test-schema\n",
      "    multivalued: false\n",
      "    domain_of:\n",
      "    - Person\n",
      "    range: string\n",
      "    inlined: false\n",
      "  name:\n",
      "    name: name\n",
      "    from_schema: http://example.org/test-schema\n",
      "    multivalued: false\n",
      "    domain_of:\n",
      "    - Person\n",
      "    range: string\n",
      "    inlined: false\n",
      "  occupation:\n",
      "    name: occupation\n",
      "    from_schema: http://example.org/test-schema\n",
      "    multivalued: false\n",
      "    domain_of:\n",
      "    - Person\n",
      "    range: string\n",
      "    inlined: false\n",
      "  moon:\n",
      "    name: moon\n",
      "    from_schema: http://example.org/test-schema\n",
      "    multivalued: false\n",
      "    domain_of:\n",
      "    - Person\n",
      "    range: string\n",
      "    inlined: false\n"
     ]
    }
   ],
   "source": [
    "from linkml_runtime.dumpers import yaml_dumper\n",
    "print(yaml_dumper.dumps(pc.class_definition()))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:14:09.766522Z",
     "start_time": "2024-04-27T19:14:09.762558Z"
    }
   },
   "id": "c08cd780-5b8e-4b98-a631-e7c71136ce3e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Asserting schemas\n",
    "\n",
    "Inducing schemas is useful for quick operations but in general you are better specifying a schema up-front. This makes things more explicit, and in future can be used to do things like validate at time of insertion.\n",
    "\n",
    "__TODO__"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "eb1a30229849985e"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Other adapters\n",
    "\n",
    "__TODO__"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "46a5786c72d7009b"
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Indexing\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "e0d396d24808dfbe"
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "outputs": [],
   "source": [
    "from linkml_store.utils.format_utils import load_objects\n",
    "\n",
    "COUNTRIES = \"../../tests/input/countries/countries.jsonl\"\n",
    "objects = load_objects(COUNTRIES)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:27:13.682753Z",
     "start_time": "2024-04-27T19:27:13.666978Z"
    }
   },
   "id": "1fdceaf8bd64bd6a"
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [],
   "source": [
    "db = client.attach_database(\"duckdb\", \"CountryDB\")\n",
    "collection = db.create_collection(\"Country\", alias=\"countries\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:27:56.893498Z",
     "start_time": "2024-04-27T19:27:56.882161Z"
    }
   },
   "id": "8665a9f513a8ccfb"
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "outputs": [],
   "source": [
    "collection.insert(objects)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:28:00.248635Z",
     "start_time": "2024-04-27T19:28:00.206828Z"
    }
   },
   "id": "3d9d17d525711c41"
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "outputs": [
    {
     "data": {
      "text/plain": "{'continent': [('Europe', 5),\n  ('Asia', 5),\n  ('North America', 3),\n  ('Africa', 3),\n  ('South America', 2),\n  ('Oceania', 2)]}"
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "collection.query_facets(facet_columns=[\"continent\"])"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:28:06.153359Z",
     "start_time": "2024-04-27T19:28:06.132649Z"
    }
   },
   "id": "66904d8281f6a30"
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "outputs": [],
   "source": [
    "collection.attach_indexer(\"simple\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:29:09.039813Z",
     "start_time": "2024-04-27T19:29:08.970934Z"
    }
   },
   "id": "b7fa297572dd61fa"
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "outputs": [],
   "source": [
    "sr = collection.search(\"Countries in the North that speak english and french\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:29:40.100441Z",
     "start_time": "2024-04-27T19:29:40.075753Z"
    }
   },
   "id": "28a2c7e2822acf11"
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "outputs": [
    {
     "data": {
      "text/plain": "       score            name code           capital      continent  \\\n0   0.151858          Canada   CA            Ottawa  North America   \n1   0.139609   United States   US  Washington, D.C.  North America   \n2   0.128295    South Africa   ZA          Pretoria         Africa   \n3   0.101139  United Kingdom   GB            London         Europe   \n4   0.096154          Mexico   MX       Mexico City  North America   \n5   0.095924     New Zealand   NZ        Wellington        Oceania   \n6   0.091025          France   FR             Paris         Europe   \n7   0.087383       Argentina   AR      Buenos Aires  South America   \n8   0.079243       Australia   AU          Canberra        Oceania   \n9   0.077674          Brazil   BR          Brasília  South America   \n10  0.070797         Nigeria   NG             Abuja         Africa   \n11  0.066827           India   IN         New Delhi           Asia   \n12  0.061174     South Korea   KR             Seoul           Asia   \n13  0.057554           China   CN           Beijing           Asia   \n14  0.040782           Spain   ES            Madrid         Europe   \n15  0.040782           Japan   JP             Tokyo           Asia   \n16  0.040564           Egypt   EG             Cairo         Africa   \n17  0.040032         Germany   DE            Berlin         Europe   \n18  0.028916       Indonesia   ID           Jakarta           Asia   \n19  0.027985           Italy   IT              Rome         Europe   \n\n                                            languages  \n0                                   [English, French]  \n1                                           [English]  \n2   [Zulu, Xhosa, Afrikaans, English, Northern Sot...  \n3                                           [English]  \n4                                           [Spanish]  \n5                                    [English, Māori]  \n6                                            [French]  \n7                                           [Spanish]  \n8                                           [English]  \n9                                        [Portuguese]  \n10                                          [English]  \n11                                   [Hindi, English]  \n12                                           [Korean]  \n13                                 [Standard Chinese]  \n14                                          [Spanish]  \n15                                         [Japanese]  \n16                                           [Arabic]  \n17                                           [German]  \n18                                       [Indonesian]  \n19                                          [Italian]  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score</th>\n      <th>name</th>\n      <th>code</th>\n      <th>capital</th>\n      <th>continent</th>\n      <th>languages</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.151858</td>\n      <td>Canada</td>\n      <td>CA</td>\n      <td>Ottawa</td>\n      <td>North America</td>\n      <td>[English, French]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.139609</td>\n      <td>United States</td>\n      <td>US</td>\n      <td>Washington, D.C.</td>\n      <td>North America</td>\n      <td>[English]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.128295</td>\n      <td>South Africa</td>\n      <td>ZA</td>\n      <td>Pretoria</td>\n      <td>Africa</td>\n      <td>[Zulu, Xhosa, Afrikaans, English, Northern Sot...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.101139</td>\n      <td>United Kingdom</td>\n      <td>GB</td>\n      <td>London</td>\n      <td>Europe</td>\n      <td>[English]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.096154</td>\n      <td>Mexico</td>\n      <td>MX</td>\n      <td>Mexico City</td>\n      <td>North America</td>\n      <td>[Spanish]</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.095924</td>\n      <td>New Zealand</td>\n      <td>NZ</td>\n      <td>Wellington</td>\n      <td>Oceania</td>\n      <td>[English, Māori]</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.091025</td>\n      <td>France</td>\n      <td>FR</td>\n      <td>Paris</td>\n      <td>Europe</td>\n      <td>[French]</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0.087383</td>\n      <td>Argentina</td>\n      <td>AR</td>\n      <td>Buenos Aires</td>\n      <td>South America</td>\n      <td>[Spanish]</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.079243</td>\n      <td>Australia</td>\n      <td>AU</td>\n      <td>Canberra</td>\n      <td>Oceania</td>\n      <td>[English]</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0.077674</td>\n      <td>Brazil</td>\n      <td>BR</td>\n      <td>Brasília</td>\n      <td>South America</td>\n      <td>[Portuguese]</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.070797</td>\n      <td>Nigeria</td>\n      <td>NG</td>\n      <td>Abuja</td>\n      <td>Africa</td>\n      <td>[English]</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0.066827</td>\n      <td>India</td>\n      <td>IN</td>\n      <td>New Delhi</td>\n      <td>Asia</td>\n      <td>[Hindi, English]</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0.061174</td>\n      <td>South Korea</td>\n      <td>KR</td>\n      <td>Seoul</td>\n      <td>Asia</td>\n      <td>[Korean]</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>0.057554</td>\n      <td>China</td>\n      <td>CN</td>\n      <td>Beijing</td>\n      <td>Asia</td>\n      <td>[Standard Chinese]</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.040782</td>\n      <td>Spain</td>\n      <td>ES</td>\n      <td>Madrid</td>\n      <td>Europe</td>\n      <td>[Spanish]</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>0.040782</td>\n      <td>Japan</td>\n      <td>JP</td>\n      <td>Tokyo</td>\n      <td>Asia</td>\n      <td>[Japanese]</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>0.040564</td>\n      <td>Egypt</td>\n      <td>EG</td>\n      <td>Cairo</td>\n      <td>Africa</td>\n      <td>[Arabic]</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>0.040032</td>\n      <td>Germany</td>\n      <td>DE</td>\n      <td>Berlin</td>\n      <td>Europe</td>\n      <td>[German]</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>0.028916</td>\n      <td>Indonesia</td>\n      <td>ID</td>\n      <td>Jakarta</td>\n      <td>Asia</td>\n      <td>[Indonesian]</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>0.027985</td>\n      <td>Italy</td>\n      <td>IT</td>\n      <td>Rome</td>\n      <td>Europe</td>\n      <td>[Italian]</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sr.rows_dataframe"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-04-27T19:29:44.474226Z",
     "start_time": "2024-04-27T19:29:44.455816Z"
    }
   },
   "id": "5a24b063d63a2cdf"
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   },
   "id": "dcb2b02adb9fe5d3"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
