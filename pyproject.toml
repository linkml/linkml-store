[tool.poetry]
name = "linkml-store"
version = "0.2.5.post9.dev0+29fcfc4"
description = "linkml-store"
authors = ["Author 1 <author@org.org>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
click = "*"
pydantic = "^2.0.0"
linkml-runtime = ">=1.8.0"
streamlit = { version = "^1.32.2", optional = true }
sqlalchemy = "*"
google-cloud-bigquery = "*"
duckdb = ">=0.10.1"
duckdb-engine = ">=0.11.2"
matplotlib = { version = "*", optional = true }
seaborn = { version = "*", optional = true }
plotly = { version = "*", optional = true }
pystow = "^0.5.4"
black = { version=">=24.0.0", optional = true }
ruff = { version=">=0.6.2", optional = true }
llm = { version="*", optional = true }
tiktoken = { version="*", optional = true }
pymongo = "^4.11"
neo4j = { version="*", optional = true }
py2neo = { version="*", optional = true }
networkx = { version="*", optional = true }
#chromadb = { version="*", optional = true }
pyarrow = { version="*", optional = true }
h5py = { version="*", optional = true }
scipy = { version="*", optional = true }
scikit-learn = { version="*", optional = true }
linkml = { version=">=1.8.0", optional = true }
linkml_map = { version="*", optional = true }
linkml_renderer = { version="*", optional = true }
frictionless = { version="*", optional = true }
#ibis-framework = { version=">=9.3.0", extras = ["duckdb", "examples"], optional = true }
gcsfs = { version="*", optional = true }
multipledispatch = { version="*" }
tabulate = "*"
pandas = ">=2.2.1"
jinja2 = "^3.1.4"
jsonlines = "^4.0.0"
fastapi = { version="*", optional = true }
uvicorn = { version="*", optional = true }
xmltodict = ">=0.13.0"
jsonpatch = ">=1.33"
python-dotenv = "^1.0.1"

[tool.poetry.group.dev.dependencies]
pytest = {version = ">=7.1.2"}
tox = {version = ">=3.25.1"}
pre-commit = {version = ">=3.3.3"}
sphinx = {version = ">=6.1.3"}
sphinx-rtd-theme = {version = ">=1.0.0"}
sphinx-autodoc-typehints = {version = "<2.0.0"}
sphinx-click = {version = ">=4.3.0"}
sphinx-automodapi = "*"
myst-parser = {version = ">=0.18.1"}
furo = {version = "*"}
nbsphinx = "*"
jupyter = "*"
jupysql = "*"
papermill = "*"
nbdime = "*"

[tool.poetry.group.tests.dependencies]
pytest = "^7.4.0"
pytest-subtests = "^0.11.0"
numpy = [
  { "version" = ">=1.24.3", "python" = "<3.12" },
  { "version" = ">=1.25.2", "python" = ">=3.12" }
]

[tool.poetry.extras]
analytics = ["pandas", "matplotlib", "seaborn", "plotly"]
app = ["streamlit"]
tests = ["black", "ruff"]
llm = ["llm", "tiktoken"]
mongodb = ["pymongo"]
neo4j = ["neo4j", "py2neo", "networkx"]
#chromadb = ["chromadb"]
h5py = ["h5py"]
pyarrow = ["pyarrow"]
validation = ["linkml"]
map = ["linkml_map"]
renderer = ["linkml_renderer"]
fastapi = ["fastapi", "uvicorn"]
frictionless = ["frictionless"]
scipy = ["scipy", "scikit-learn"]
#ibis = ["ibis-framework", "multipledispatch", "gcsfs"]
bigquery = ["google-cloud-bigquery"]
all = ["llm", "mongodb", "neo4j", "validation", "map", "renderer", "bigquery"]

[tool.poetry.scripts]
linkml-store = "linkml_store.cli:cli"
linkml-store-api = "linkml_store.webapi.main:start"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "pep440"

[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311"]
force-exclude = '''
/(
  # default exclude
  \.direnv|\.eggs|\.git|\.hg|\.ipynb_checkpoints|\.mypy_cache|\.nox|\.pytest_cache|\.ruff_cache|\.tox|\.svn|\.venv|\.vscode|__pypackages__|_build|buck-out|build|dist|venv
  # additional exclude
  | tests.*/output
  | __snapshots__
  | docs
  | examples
  | notebooks
)/
'''

[tool.ruff]
extend-exclude = [
    "tests/output",
    "tests/**/output",
    "tests/**/__snapshots__",
    "examples/",
    "docs/",
    "notebooks/"
]
force-exclude = true
line-length = 120
lint.extend-ignore = ["E203"]
lint.select = [
  "E",  # pycodestyle errors
  "F",  # Pyflakes
  "I",  # isort
]



[tool.codespell]
# TODO: bring in tests in too
skip = '.git,*.pdf,*.svg,./tests,pyproject.toml,*.dill,poetry.lock,*.ipynb'
# Ignore table where words could be split across rows
# Ignore shortcut specifications like [Ff]alse
ignore-regex = '(\|.*\|.*\|.*\||\[[A-Z][a-z]\][a-z][a-z])'
ignore-words-list = 'mater,connexion,infarction,nin'
count = ""
quiet-level = 3

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
